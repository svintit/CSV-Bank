{"version":3,"file":"react.js","sources":["src/util.js","src/integrations/react.js"],"sourcesContent":["// Bind an object/factory of actions to the store and wrap them.\nexport function mapActions(actions, store) {\n\tif (typeof actions==='function') actions = actions(store);\n\tlet mapped = {};\n\tfor (let i in actions) {\n\t\tmapped[i] = store.action(actions[i]);\n\t}\n\treturn mapped;\n}\n\n\n// select('foo,bar') creates a function of the form: ({ foo, bar }) => ({ foo, bar })\nexport function select(properties) {\n\tif (typeof properties==='string') properties = properties.split(/\\s*,\\s*/);\n\treturn state => {\n\t\tlet selected = {};\n\t\tfor (let i=0; i<properties.length; i++) {\n\t\t\tselected[properties[i]] = state[properties[i]];\n\t\t}\n\t\treturn selected;\n\t};\n}\n\n\n// Lighter Object.assign stand-in\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n","import { createElement, Children, Component } from 'react';\nimport { assign, mapActions, select } from '../util';\n\nconst CONTEXT_TYPES = {\n\tstore: () => {}\n};\n\n/** Wire a component up to the store. Passes state as props, re-renders on change.\n *  @param {Function|Array|String} mapStateToProps  A function mapping of store state to prop values, or an array/CSV of properties to map.\n *  @param {Function|Object} [actions] \t\t\t\tAction functions (pure state mappings), or a factory returning them. Every action function gets current state as the first parameter and any other params next\n *  @returns {Component} ConnectedComponent\n *  @example\n *    const Foo = connect('foo,bar')( ({ foo, bar }) => <div /> )\n *  @example\n *    const actions = { someAction }\n *    const Foo = connect('foo,bar', actions)( ({ foo, bar, someAction }) => <div /> )\n *  @example\n *    @connect( state => ({ foo: state.foo, bar: state.bar }) )\n *    export class Foo { render({ foo, bar }) { } }\n */\nexport function connect(mapStateToProps, actions) {\n\tif (typeof mapStateToProps!=='function') {\n\t\tmapStateToProps = select(mapStateToProps || []);\n\t}\n\treturn Child => {\n\t\tfunction Wrapper(props, context) {\n\t\t\tComponent.call(this, props, context);\n\t\t\tconst store = context.store;\n\t\t\tlet state = mapStateToProps(store ? store.getState() : {}, props);\n\t\t\tconst boundActions = actions ? mapActions(actions, store) : { store };\n\t\t\tlet update = () => {\n\t\t\t\tlet mapped = mapStateToProps(store ? store.getState() : {}, props);\n\t\t\t\tfor (let i in mapped) if (mapped[i]!==state[i]) {\n\t\t\t\t\tstate = mapped;\n\t\t\t\t\treturn this.forceUpdate();\n\t\t\t\t}\n\t\t\t\tfor (let i in state) if (!(i in mapped)) {\n\t\t\t\t\tstate = mapped;\n\t\t\t\t\treturn this.forceUpdate();\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.componentWillReceiveProps = p => {\n\t\t\t\tprops = p;\n\t\t\t\tupdate();\n\t\t\t};\n\t\t\tthis.componentDidMount = () => {\n\t\t\t\tstore.subscribe(update);\n\t\t\t};\n\t\t\tthis.componentWillUnmount = () => {\n\t\t\t\tstore.unsubscribe(update);\n\t\t\t};\n\t\t\tthis.render = () => createElement(Child, assign(assign(assign({}, boundActions), this.props), state));\n\t\t}\n\t\tWrapper.contextTypes = CONTEXT_TYPES;\n\t\treturn (Wrapper.prototype = Object.create(Component.prototype)).constructor = Wrapper;\n\t};\n}\n\n\n/** Provider exposes a store (passed as `props.store`) into context.\n *\n *  Generally, an entire application is wrapped in a single `<Provider>` at the root.\n *  @class\n *  @extends Component\n *  @param {Object} props\n *  @param {Store} props.store\t\tA {Store} instance to expose via context.\n */\nexport class Provider extends Component {\n\tgetChildContext() {\n\t\treturn { store: this.props.store };\n\t}\n\trender() {\n\t\treturn Children.only(this.props.children);\n\t}\n}\nProvider.childContextTypes = CONTEXT_TYPES;\n"],"names":["assign","obj","props","let","i","CONTEXT_TYPES","store","Provider","getChildContext","this","render","Children","only","children","Component","childContextTypes","mapStateToProps","actions","properties","split","state","selected","length","Child","Wrapper","context","call","getState","boundActions","mapped","action","mapActions","update","forceUpdate","componentWillReceiveProps","p","componentDidMount","subscribe","componentWillUnmount","unsubscribe","createElement","contextTypes","prototype","Object","create","constructor"],"mappings":"uBAyBO,SAASA,EAAOC,EAAKC,OACtBC,IAAIC,KAAKF,EAAOD,EAAIG,GAAKF,EAAME,UAC7BH,MCxBFI,EAAgB,CACrBC,oBA+DYC,mJACZC,iCACQ,CAAEF,MAAOG,KAAKP,MAAMI,oBAE5BI,yBACQC,WAASC,KAAKH,KAAKP,MAAMW,cALJC,aAQ9BP,EAASQ,kBAAoBV,kBAvDtB,SAAiBW,EAAiBC,GDRlC,IAAgBC,QCSO,mBAAlBF,IDRa,iBADFE,ECUIF,GAAmB,MDTXE,EAAaA,EAAWC,MAAM,YCS/DH,WDRMI,WACFC,EAAW,GACNjB,EAAE,EAAGA,EAAEc,EAAWI,OAAQlB,IAClCiB,EAASH,EAAWd,IAAMgB,EAAMF,EAAWd,WAErCiB,aCKDE,YACGC,EAAQtB,EAAOuB,cACvBX,YAAUY,KAAKjB,KAAMP,EAAOuB,OACtBnB,EAAQmB,EAAQnB,MAClBc,EAAQJ,EAAgBV,EAAQA,EAAMqB,WAAa,GAAIzB,GACrD0B,EAAeX,ED5BjB,SAAoBA,EAASX,GACd,mBAAVW,IAAsBA,EAAUA,EAAQX,QAC/CuB,EAAS,OACR1B,IAAIC,KAAKa,EACbY,EAAOzB,GAAKE,EAAMwB,OAAOb,EAAQb,WAE3ByB,ECsB0BE,CAAWd,EAASX,GAAS,OAAEA,GAC1D0B,iBACCH,EAASb,EAAgBV,EAAQA,EAAMqB,WAAa,GAAIzB,OACvDC,IAAIC,KAAKyB,EAAQ,GAAIA,EAAOzB,KAAKgB,EAAMhB,UAC3CgB,EAAQS,EACDpB,EAAKwB,kBAER9B,IAAIC,KAAKgB,EAAO,KAAMhB,KAAKyB,UAC/BT,EAAQS,EACDpB,EAAKwB,oBAGTC,mCAA4BC,GAChCjC,EAAQiC,EACRH,UAEII,6BACJ9B,EAAM+B,UAAUL,SAEZM,gCACJhC,EAAMiC,YAAYP,SAEdtB,yBAAe8B,gBAAcjB,EAAOvB,EAAOA,EAAOA,EAAO,GAAI4B,GAAenB,EAAKP,OAAQkB,YAE/FI,EAAQiB,aAAepC,GACfmB,EAAQkB,UAAYC,OAAOC,OAAO9B,YAAU4B,YAAYG,YAAcrB"}