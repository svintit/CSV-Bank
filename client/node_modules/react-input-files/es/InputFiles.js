import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import * as React from 'react';
import PropTypes from 'prop-types';
import { Portal } from 'react-portal';

var InputFiles =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(InputFiles, _React$PureComponent);

  function InputFiles() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.input = React.createRef();

    _this.onClick = function (e) {
      e.preventDefault();
      var input = _this.input.current;
      if (input) input.click();
    };

    _this.onChange = function (e) {
      var onChange = _this.props.onChange;
      onChange(e.target.files, e);
    };

    return _this;
  }

  var _proto = InputFiles.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        accept = _this$props.accept,
        style = _this$props.style,
        multiple = _this$props.multiple;
    var input = this.input,
        onClick = this.onClick,
        onChange = this.onChange;
    return React.createElement(React.Fragment, null, React.createElement("div", {
      onClick: onClick,
      onKeyPress: onClick,
      role: "button",
      tabIndex: "0",
      style: _extends({
        display: 'inline-block'
      }, style)
    }, children), React.createElement(Portal, null, React.createElement("input", {
      ref: input,
      type: "file",
      accept: accept,
      onChange: onChange,
      style: {
        display: 'none'
      },
      multiple: multiple
    })));
  };

  return InputFiles;
}(React.PureComponent);

InputFiles.defaultProps = {
  accept: 'image/*'
};
process.env.NODE_ENV !== "production" ? InputFiles.propTypes = {
  children: PropTypes.node.isRequired,
  onChange: PropTypes.func,
  // (files: Array<File>, e: SyntheticEvent<HTMLInputElement>) => void,
  accept: PropTypes.string,
  style: PropTypes.object,
  // eslint-disable-line
  multiple: PropTypes.bool
} : void 0;
export default InputFiles;